name: build and upload artifacts
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      tag_name:
        type: string

env:
  VERSION: ${{ inputs.tag_name }}

jobs:
  build:
    name: build and upload artifacts
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            target: windows
            cc: x86_64-w64-mingw32-gcc
            ext: .exe
          - os: ubuntu-20.04
            arch: amd64
            target: linux
          - os: macos-latest
            arch: amd64
            target: darwin
          - os: macos-latest
            arch: arm64
            target: darwin

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Fetch all git tags
        run: git fetch --prune --unshallow --tags
      - name: Set Version
        if: ${{ env.VERSION == '' }}
        run: |
          export VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')-dev
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: installing dependencies
        uses: ./.github/actions/install
        with:
          os: ${{ matrix.os }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Fyne
        run: go install fyne.io/fyne/v2/cmd/fyne@latest
      - name: Set environment variables
        run: |
          echo "GOOS=${{ matrix.target }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
      - name: Build binary for ${{ matrix.target }} on ${{ matrix.arch}}
        shell: bash
        run: |
          go build -ldflags "-X github.com/massalabs/station/int/config.Version=${{env.VERSION}}" -o massastation_${{ matrix.target }}_${{ matrix.arch }}${{ matrix.ext }} ./cmd/massastation/
      - name: Package binary for ${{ matrix.target }} on ${{ matrix.arch}}
        # We don't need to package for windows since fyne package generates a similar .exe as go build.
        if: matrix.target != 'windows'
        shell: bash
        run: |
          cp massastation_${{ matrix.target }}_${{ matrix.arch }} massastation
          fyne package -name MassaStation -icon ./int/systray/embedded/logo.png -appID net.massalabs.massastation -exe massastation
      - name: Upload MassaStation Binary
        uses: actions/upload-artifact@v3
        with:
          name: massastation_${{ matrix.target }}_${{ matrix.arch }}_bin
          path: |
            massastation_${{ matrix.target }}_${{ matrix.arch }}
            massastation_${{ matrix.target }}_${{ matrix.arch }}.exe
          if-no-files-found: error
          retention-days: 7
      - name: Upload Package
        # We don't need to upload package for windows since we do not package for windows.
        if: matrix.target != 'windows'
        uses: actions/upload-artifact@v3
        with:
          name: massastation_${{ matrix.target }}_${{ matrix.arch }}_package
          path: |
            MassaStation.app
            MassaStation.tar.xz
          if-no-files-found: error
          retention-days: 1

  build-macos-installer:
    name: Build .pkg installer for MacOS ${{ matrix.arch }}
    needs: build
    defaults:
      run:
        working-directory: installer
    strategy:
      matrix:
        arch: [amd64, arm64]

    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Fetch all git tags
        run: git fetch --prune --unshallow --tags
      - name: Download MassaStation Package
        uses: actions/download-artifact@v3
        with:
          name: massastation_darwin_${{ matrix.arch }}_package
          path: installer
      - name: Build Package
        run: sh macos/create_pkg.sh ${{ matrix.arch }}
        env:
          VERSION: ${{ env.VERSION }}
      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: massastation_installer_darwin_${{ matrix.arch }}
          path: "installer/*.pkg"
          if-no-files-found: error
          retention-days: 7

  build-packages-windows:
    name: Build .msi installer for amd64
    needs: build
    defaults:
      run:
        working-directory: ./installer

    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Fetch all git tags
        run: git fetch --prune --unshallow --tags
      - name: Download MassaStation
        uses: actions/download-artifact@v3
        with:
          name: massastation_windows_amd64_bin
      - name: Rename MassaStation binary
        run: mv ../massastation_windows_amd64.exe massastation.exe
      - name: Build Installer
        run: python windows/build_installer.py
        env:
          VERSION: ${{ env.VERSION }}
      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: massastation_installer_windows_amd64
          path: "installer/*.msi"
          if-no-files-found: error
          retention-days: 7

  build-deb-installer:
    name: Build .deb installer for Linux amd64
    needs: build
    defaults:
      run:
        working-directory: installer

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Fetch all git tags
        run: git fetch --prune --unshallow --tags
      - name: Download MassaStation Package
        uses: actions/download-artifact@v3
        with:
          name: massastation_linux_amd64_package
          path: installer
      - name: Build Package
        run: sh deb/create_deb.sh
        env:
          VERSION: ${{ env.VERSION }}
      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: massastation_installer_deb_amd64
          path: "installer/*.deb"
          if-no-files-found: error
          retention-days: 7
