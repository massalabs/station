// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/certstore/api_windows.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	unsafe "unsafe"

	gomock "go.uber.org/mock/gomock"
	windows "golang.org/x/sys/windows"
)

// MockWinAPI is a mock of WinAPI interface.
type MockWinAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWinAPIMockRecorder
}

// MockWinAPIMockRecorder is the mock recorder for MockWinAPI.
type MockWinAPIMockRecorder struct {
	mock *MockWinAPI
}

// NewMockWinAPI creates a new mock instance.
func NewMockWinAPI(ctrl *gomock.Controller) *MockWinAPI {
	mock := &MockWinAPI{ctrl: ctrl}
	mock.recorder = &MockWinAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWinAPI) EXPECT() *MockWinAPIMockRecorder {
	return m.recorder
}

// CertAddCertificateContextToStore mocks base method.
func (m *MockWinAPI) CertAddCertificateContextToStore(store windows.Handle, certContext *windows.CertContext, addDisposition uint32, storeContext **windows.CertContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertAddCertificateContextToStore", store, certContext, addDisposition, storeContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// CertAddCertificateContextToStore indicates an expected call of CertAddCertificateContextToStore.
func (mr *MockWinAPIMockRecorder) CertAddCertificateContextToStore(store, certContext, addDisposition, storeContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertAddCertificateContextToStore", reflect.TypeOf((*MockWinAPI)(nil).CertAddCertificateContextToStore), store, certContext, addDisposition, storeContext)
}

// CertCloseStore mocks base method.
func (m *MockWinAPI) CertCloseStore(handle windows.Handle, flags uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertCloseStore", handle, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// CertCloseStore indicates an expected call of CertCloseStore.
func (mr *MockWinAPIMockRecorder) CertCloseStore(handle, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertCloseStore", reflect.TypeOf((*MockWinAPI)(nil).CertCloseStore), handle, flags)
}

// CertCreateCertificateContext mocks base method.
func (m *MockWinAPI) CertCreateCertificateContext(certEncodingType uint32, certEncoded *byte, certEncodedLen uint32) (*windows.CertContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertCreateCertificateContext", certEncodingType, certEncoded, certEncodedLen)
	ret0, _ := ret[0].(*windows.CertContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertCreateCertificateContext indicates an expected call of CertCreateCertificateContext.
func (mr *MockWinAPIMockRecorder) CertCreateCertificateContext(certEncodingType, certEncoded, certEncodedLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertCreateCertificateContext", reflect.TypeOf((*MockWinAPI)(nil).CertCreateCertificateContext), certEncodingType, certEncoded, certEncodedLen)
}

// CertDeleteCertificateFromStore mocks base method.
func (m *MockWinAPI) CertDeleteCertificateFromStore(certContext *windows.CertContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertDeleteCertificateFromStore", certContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// CertDeleteCertificateFromStore indicates an expected call of CertDeleteCertificateFromStore.
func (mr *MockWinAPIMockRecorder) CertDeleteCertificateFromStore(certContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertDeleteCertificateFromStore", reflect.TypeOf((*MockWinAPI)(nil).CertDeleteCertificateFromStore), certContext)
}

// CertEnumCertificatesInStore mocks base method.
func (m *MockWinAPI) CertEnumCertificatesInStore(store windows.Handle, prevContext *windows.CertContext) (*windows.CertContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertEnumCertificatesInStore", store, prevContext)
	ret0, _ := ret[0].(*windows.CertContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertEnumCertificatesInStore indicates an expected call of CertEnumCertificatesInStore.
func (mr *MockWinAPIMockRecorder) CertEnumCertificatesInStore(store, prevContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertEnumCertificatesInStore", reflect.TypeOf((*MockWinAPI)(nil).CertEnumCertificatesInStore), store, prevContext)
}

// CertFindCertificateInStore mocks base method.
func (m *MockWinAPI) CertFindCertificateInStore(store windows.Handle, certEncodingType, findFlags, findType uint32, findPara unsafe.Pointer, prevCertContext *windows.CertContext) (*windows.CertContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertFindCertificateInStore", store, certEncodingType, findFlags, findType, findPara, prevCertContext)
	ret0, _ := ret[0].(*windows.CertContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertFindCertificateInStore indicates an expected call of CertFindCertificateInStore.
func (mr *MockWinAPIMockRecorder) CertFindCertificateInStore(store, certEncodingType, findFlags, findType, findPara, prevCertContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertFindCertificateInStore", reflect.TypeOf((*MockWinAPI)(nil).CertFindCertificateInStore), store, certEncodingType, findFlags, findType, findPara, prevCertContext)
}

// CertOpenSystemStore mocks base method.
func (m *MockWinAPI) CertOpenSystemStore(handle windows.Handle, name *uint16) (windows.Handle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertOpenSystemStore", handle, name)
	ret0, _ := ret[0].(windows.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertOpenSystemStore indicates an expected call of CertOpenSystemStore.
func (mr *MockWinAPIMockRecorder) CertOpenSystemStore(handle, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertOpenSystemStore", reflect.TypeOf((*MockWinAPI)(nil).CertOpenSystemStore), handle, name)
}

// UTF16PtrFromString mocks base method.
func (m *MockWinAPI) UTF16PtrFromString(s string) (*uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTF16PtrFromString", s)
	ret0, _ := ret[0].(*uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UTF16PtrFromString indicates an expected call of UTF16PtrFromString.
func (mr *MockWinAPIMockRecorder) UTF16PtrFromString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTF16PtrFromString", reflect.TypeOf((*MockWinAPI)(nil).UTF16PtrFromString), s)
}
