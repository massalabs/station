// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// MgmtWalletGetOKCode is the HTTP code returned for type MgmtWalletGetOK
const MgmtWalletGetOKCode int = 200

/*MgmtWalletGetOK Wallets retrieved

swagger:response mgmtWalletGetOK
*/
type MgmtWalletGetOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Wallet `json:"body,omitempty"`
}

// NewMgmtWalletGetOK creates MgmtWalletGetOK with default headers values
func NewMgmtWalletGetOK() *MgmtWalletGetOK {

	return &MgmtWalletGetOK{}
}

// WithPayload adds the payload to the mgmt wallet get o k response
func (o *MgmtWalletGetOK) WithPayload(payload []*models.Wallet) *MgmtWalletGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get o k response
func (o *MgmtWalletGetOK) SetPayload(payload []*models.Wallet) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Wallet, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// MgmtWalletGetBadRequestCode is the HTTP code returned for type MgmtWalletGetBadRequest
const MgmtWalletGetBadRequestCode int = 400

/*MgmtWalletGetBadRequest Bad request.

swagger:response mgmtWalletGetBadRequest
*/
type MgmtWalletGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMgmtWalletGetBadRequest creates MgmtWalletGetBadRequest with default headers values
func NewMgmtWalletGetBadRequest() *MgmtWalletGetBadRequest {

	return &MgmtWalletGetBadRequest{}
}

// WithPayload adds the payload to the mgmt wallet get bad request response
func (o *MgmtWalletGetBadRequest) WithPayload(payload *models.Error) *MgmtWalletGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get bad request response
func (o *MgmtWalletGetBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MgmtWalletGetInternalServerErrorCode is the HTTP code returned for type MgmtWalletGetInternalServerError
const MgmtWalletGetInternalServerErrorCode int = 500

/*MgmtWalletGetInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response mgmtWalletGetInternalServerError
*/
type MgmtWalletGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMgmtWalletGetInternalServerError creates MgmtWalletGetInternalServerError with default headers values
func NewMgmtWalletGetInternalServerError() *MgmtWalletGetInternalServerError {

	return &MgmtWalletGetInternalServerError{}
}

// WithPayload adds the payload to the mgmt wallet get internal server error response
func (o *MgmtWalletGetInternalServerError) WithPayload(payload *models.Error) *MgmtWalletGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get internal server error response
func (o *MgmtWalletGetInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
