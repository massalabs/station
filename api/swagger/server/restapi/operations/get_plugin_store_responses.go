// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// GetPluginStoreOKCode is the HTTP code returned for type GetPluginStoreOK
const GetPluginStoreOKCode int = 200

/*
GetPluginStoreOK List of plugins

swagger:response getPluginStoreOK
*/
type GetPluginStoreOK struct {

	/*
	  In: Body
	*/
	Payload []*models.PluginStoreItem `json:"body,omitempty"`
}

// NewGetPluginStoreOK creates GetPluginStoreOK with default headers values
func NewGetPluginStoreOK() *GetPluginStoreOK {

	return &GetPluginStoreOK{}
}

// WithPayload adds the payload to the get plugin store o k response
func (o *GetPluginStoreOK) WithPayload(payload []*models.PluginStoreItem) *GetPluginStoreOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin store o k response
func (o *GetPluginStoreOK) SetPayload(payload []*models.PluginStoreItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginStoreOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.PluginStoreItem, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPluginStoreBadRequestCode is the HTTP code returned for type GetPluginStoreBadRequest
const GetPluginStoreBadRequestCode int = 400

/*
GetPluginStoreBadRequest Bad request.

swagger:response getPluginStoreBadRequest
*/
type GetPluginStoreBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPluginStoreBadRequest creates GetPluginStoreBadRequest with default headers values
func NewGetPluginStoreBadRequest() *GetPluginStoreBadRequest {

	return &GetPluginStoreBadRequest{}
}

// WithPayload adds the payload to the get plugin store bad request response
func (o *GetPluginStoreBadRequest) WithPayload(payload *models.Error) *GetPluginStoreBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin store bad request response
func (o *GetPluginStoreBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginStoreBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPluginStoreNotFoundCode is the HTTP code returned for type GetPluginStoreNotFound
const GetPluginStoreNotFoundCode int = 404

/*
GetPluginStoreNotFound Not found.

swagger:response getPluginStoreNotFound
*/
type GetPluginStoreNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPluginStoreNotFound creates GetPluginStoreNotFound with default headers values
func NewGetPluginStoreNotFound() *GetPluginStoreNotFound {

	return &GetPluginStoreNotFound{}
}

// WithPayload adds the payload to the get plugin store not found response
func (o *GetPluginStoreNotFound) WithPayload(payload *models.Error) *GetPluginStoreNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin store not found response
func (o *GetPluginStoreNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginStoreNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPluginStoreUnprocessableEntityCode is the HTTP code returned for type GetPluginStoreUnprocessableEntity
const GetPluginStoreUnprocessableEntityCode int = 422

/*
GetPluginStoreUnprocessableEntity Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.

swagger:response getPluginStoreUnprocessableEntity
*/
type GetPluginStoreUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPluginStoreUnprocessableEntity creates GetPluginStoreUnprocessableEntity with default headers values
func NewGetPluginStoreUnprocessableEntity() *GetPluginStoreUnprocessableEntity {

	return &GetPluginStoreUnprocessableEntity{}
}

// WithPayload adds the payload to the get plugin store unprocessable entity response
func (o *GetPluginStoreUnprocessableEntity) WithPayload(payload *models.Error) *GetPluginStoreUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin store unprocessable entity response
func (o *GetPluginStoreUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginStoreUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPluginStoreInternalServerErrorCode is the HTTP code returned for type GetPluginStoreInternalServerError
const GetPluginStoreInternalServerErrorCode int = 500

/*
GetPluginStoreInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response getPluginStoreInternalServerError
*/
type GetPluginStoreInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPluginStoreInternalServerError creates GetPluginStoreInternalServerError with default headers values
func NewGetPluginStoreInternalServerError() *GetPluginStoreInternalServerError {

	return &GetPluginStoreInternalServerError{}
}

// WithPayload adds the payload to the get plugin store internal server error response
func (o *GetPluginStoreInternalServerError) WithPayload(payload *models.Error) *GetPluginStoreInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin store internal server error response
func (o *GetPluginStoreInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginStoreInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
