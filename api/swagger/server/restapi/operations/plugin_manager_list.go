// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PluginManagerListHandlerFunc turns a function with the right signature into a plugin manager list handler
type PluginManagerListHandlerFunc func(PluginManagerListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PluginManagerListHandlerFunc) Handle(params PluginManagerListParams) middleware.Responder {
	return fn(params)
}

// PluginManagerListHandler interface for that can handle valid plugin manager list params
type PluginManagerListHandler interface {
	Handle(PluginManagerListParams) middleware.Responder
}

// NewPluginManagerList creates a new http.Handler for the plugin manager list operation
func NewPluginManagerList(ctx *middleware.Context, handler PluginManagerListHandler) *PluginManagerList {
	return &PluginManagerList{Context: ctx, Handler: handler}
}

/*
	PluginManagerList swagger:route GET /plugin-manager pluginManagerList

PluginManagerList plugin manager list API
*/
type PluginManagerList struct {
	Context *middleware.Context
	Handler PluginManagerListHandler
}

func (o *PluginManagerList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPluginManagerListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PluginManagerListOKBodyItems0 plugin manager list o k body items0
//
// swagger:model PluginManagerListOKBodyItems0
type PluginManagerListOKBodyItems0 struct {

	// Plugin description.
	Description string `json:"description,omitempty"`

	// Plugin home Url.
	Home string `json:"home,omitempty"`

	// Plugin identifier.
	ID int64 `json:"id,omitempty"`

	// Plugin logo Url.
	Logo string `json:"logo,omitempty"`

	// Plugin name.
	Name string `json:"name,omitempty"`

	// Plugin status.
	// Enum: [Starting Up Down ShuttingDown Crashed]
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this plugin manager list o k body items0
func (o *PluginManagerListOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this plugin manager list o k body items0 based on context it is used
func (o *PluginManagerListOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PluginManagerListOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PluginManagerListOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res PluginManagerListOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
