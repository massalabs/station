// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPluginStoreHandlerFunc turns a function with the right signature into a get plugin store handler
type GetPluginStoreHandlerFunc func(GetPluginStoreParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPluginStoreHandlerFunc) Handle(params GetPluginStoreParams) middleware.Responder {
	return fn(params)
}

// GetPluginStoreHandler interface for that can handle valid get plugin store params
type GetPluginStoreHandler interface {
	Handle(GetPluginStoreParams) middleware.Responder
}

// NewGetPluginStore creates a new http.Handler for the get plugin store operation
func NewGetPluginStore(ctx *middleware.Context, handler GetPluginStoreHandler) *GetPluginStore {
	return &GetPluginStore{Context: ctx, Handler: handler}
}

/*
	GetPluginStore swagger:route GET /plugin-store getPluginStore

# Get list of available plugins from store

Returns a list of PluginStoreItem structs
*/
type GetPluginStore struct {
	Context *middleware.Context
	Handler GetPluginStoreHandler
}

func (o *GetPluginStore) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPluginStoreParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
