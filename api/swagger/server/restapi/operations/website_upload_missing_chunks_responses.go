// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// WebsiteUploadMissingChunksOKCode is the HTTP code returned for type WebsiteUploadMissingChunksOK
const WebsiteUploadMissingChunksOKCode int = 200

/*
WebsiteUploadMissingChunksOK Website's chunk deployed.

swagger:response websiteUploadMissingChunksOK
*/
type WebsiteUploadMissingChunksOK struct {

	/*
	  In: Body
	*/
	Payload *models.Websites `json:"body,omitempty"`
}

// NewWebsiteUploadMissingChunksOK creates WebsiteUploadMissingChunksOK with default headers values
func NewWebsiteUploadMissingChunksOK() *WebsiteUploadMissingChunksOK {

	return &WebsiteUploadMissingChunksOK{}
}

// WithPayload adds the payload to the website upload missing chunks o k response
func (o *WebsiteUploadMissingChunksOK) WithPayload(payload *models.Websites) *WebsiteUploadMissingChunksOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website upload missing chunks o k response
func (o *WebsiteUploadMissingChunksOK) SetPayload(payload *models.Websites) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteUploadMissingChunksOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteUploadMissingChunksBadRequestCode is the HTTP code returned for type WebsiteUploadMissingChunksBadRequest
const WebsiteUploadMissingChunksBadRequestCode int = 400

/*
WebsiteUploadMissingChunksBadRequest Bad request.

swagger:response websiteUploadMissingChunksBadRequest
*/
type WebsiteUploadMissingChunksBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteUploadMissingChunksBadRequest creates WebsiteUploadMissingChunksBadRequest with default headers values
func NewWebsiteUploadMissingChunksBadRequest() *WebsiteUploadMissingChunksBadRequest {

	return &WebsiteUploadMissingChunksBadRequest{}
}

// WithPayload adds the payload to the website upload missing chunks bad request response
func (o *WebsiteUploadMissingChunksBadRequest) WithPayload(payload *models.Error) *WebsiteUploadMissingChunksBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website upload missing chunks bad request response
func (o *WebsiteUploadMissingChunksBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteUploadMissingChunksBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteUploadMissingChunksUnprocessableEntityCode is the HTTP code returned for type WebsiteUploadMissingChunksUnprocessableEntity
const WebsiteUploadMissingChunksUnprocessableEntityCode int = 422

/*
WebsiteUploadMissingChunksUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response websiteUploadMissingChunksUnprocessableEntity
*/
type WebsiteUploadMissingChunksUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteUploadMissingChunksUnprocessableEntity creates WebsiteUploadMissingChunksUnprocessableEntity with default headers values
func NewWebsiteUploadMissingChunksUnprocessableEntity() *WebsiteUploadMissingChunksUnprocessableEntity {

	return &WebsiteUploadMissingChunksUnprocessableEntity{}
}

// WithPayload adds the payload to the website upload missing chunks unprocessable entity response
func (o *WebsiteUploadMissingChunksUnprocessableEntity) WithPayload(payload *models.Error) *WebsiteUploadMissingChunksUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website upload missing chunks unprocessable entity response
func (o *WebsiteUploadMissingChunksUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteUploadMissingChunksUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteUploadMissingChunksInternalServerErrorCode is the HTTP code returned for type WebsiteUploadMissingChunksInternalServerError
const WebsiteUploadMissingChunksInternalServerErrorCode int = 500

/*
WebsiteUploadMissingChunksInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response websiteUploadMissingChunksInternalServerError
*/
type WebsiteUploadMissingChunksInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteUploadMissingChunksInternalServerError creates WebsiteUploadMissingChunksInternalServerError with default headers values
func NewWebsiteUploadMissingChunksInternalServerError() *WebsiteUploadMissingChunksInternalServerError {

	return &WebsiteUploadMissingChunksInternalServerError{}
}

// WithPayload adds the payload to the website upload missing chunks internal server error response
func (o *WebsiteUploadMissingChunksInternalServerError) WithPayload(payload *models.Error) *WebsiteUploadMissingChunksInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website upload missing chunks internal server error response
func (o *WebsiteUploadMissingChunksInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteUploadMissingChunksInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
