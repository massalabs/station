// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CmdDeploySCMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var CmdDeploySCMaxParseMemory int64 = 32 << 20

// NewCmdDeploySCParams creates a new CmdDeploySCParams object
// with the default values initialized.
func NewCmdDeploySCParams() CmdDeploySCParams {

	var (
		// initialize parameters with default values

		coinsDefault    = float64(100)
		expiryDefault   = int64(3)
		feeDefault      = float64(0)
		gazLimitDefault = int64(7e+08)
		gazPriceDefault = float64(0)
		keyIDDefault    = string("default")
	)

	return CmdDeploySCParams{
		Coins: &coinsDefault,

		Expiry: &expiryDefault,

		Fee: &feeDefault,

		GazLimit: &gazLimitDefault,

		GazPrice: &gazPriceDefault,

		KeyID: &keyIDDefault,
	}
}

// CmdDeploySCParams contains all the bound params for the cmd deploy s c operation
// typically these are obtained from a http.Request
//
// swagger:parameters cmdDeploySC
type CmdDeploySCParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Website contents in a ZIP file.
	  Required: true
	  In: formData
	*/
	Wasmfile io.ReadCloser
	/*Set the fee amount (in massa) that will be given to the block creator.
	  In: formData
	  Default: 100
	*/
	Coins *float64
	/*Set the expiry duration (in number of slots) of the transaction
	  In: formData
	  Default: 3
	*/
	Expiry *int64
	/*Set the fee amount (in massa) that will be given to the block creator.
	  In: formData
	  Default: 0
	*/
	Fee *float64
	/*Maximum number of gaz unit that a node will be able consume.
	  In: formData
	  Default: 7e+08
	*/
	GazLimit *int64
	/*Price of a gaz unit.
	  In: formData
	  Default: 0
	*/
	GazPrice *float64
	/*Defines the key to used to sign the transaction.
	  In: formData
	  Default: "default"
	*/
	KeyID *string
	/*Name of the Wallet in which the website will be deployed.
	  Required: true
	  In: formData
	*/
	Nickname string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCmdDeploySCParams() beforehand.
func (o *CmdDeploySCParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(CmdDeploySCMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	wasmfile, wasmfileHeader, err := r.FormFile("Wasmfile")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "wasmfile", err))
	} else if err := o.bindWasmfile(wasmfile, wasmfileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.Wasmfile = &runtime.File{Data: wasmfile, Header: wasmfileHeader}
	}

	fdCoins, fdhkCoins, _ := fds.GetOK("coins")
	if err := o.bindCoins(fdCoins, fdhkCoins, route.Formats); err != nil {
		res = append(res, err)
	}

	fdExpiry, fdhkExpiry, _ := fds.GetOK("expiry")
	if err := o.bindExpiry(fdExpiry, fdhkExpiry, route.Formats); err != nil {
		res = append(res, err)
	}

	fdFee, fdhkFee, _ := fds.GetOK("fee")
	if err := o.bindFee(fdFee, fdhkFee, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGazLimit, fdhkGazLimit, _ := fds.GetOK("gazLimit")
	if err := o.bindGazLimit(fdGazLimit, fdhkGazLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGazPrice, fdhkGazPrice, _ := fds.GetOK("gazPrice")
	if err := o.bindGazPrice(fdGazPrice, fdhkGazPrice, route.Formats); err != nil {
		res = append(res, err)
	}

	fdKeyID, fdhkKeyID, _ := fds.GetOK("keyId")
	if err := o.bindKeyID(fdKeyID, fdhkKeyID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdNickname, fdhkNickname, _ := fds.GetOK("nickname")
	if err := o.bindNickname(fdNickname, fdhkNickname, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindWasmfile binds file parameter Wasmfile.
//
// The only supported validations on files are MinLength and MaxLength
func (o *CmdDeploySCParams) bindWasmfile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindCoins binds and validates parameter Coins from formData.
func (o *CmdDeploySCParams) bindCoins(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCmdDeploySCParams()
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("coins", "formData", "float64", raw)
	}
	o.Coins = &value

	return nil
}

// bindExpiry binds and validates parameter Expiry from formData.
func (o *CmdDeploySCParams) bindExpiry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCmdDeploySCParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("expiry", "formData", "int64", raw)
	}
	o.Expiry = &value

	return nil
}

// bindFee binds and validates parameter Fee from formData.
func (o *CmdDeploySCParams) bindFee(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCmdDeploySCParams()
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("fee", "formData", "float64", raw)
	}
	o.Fee = &value

	return nil
}

// bindGazLimit binds and validates parameter GazLimit from formData.
func (o *CmdDeploySCParams) bindGazLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCmdDeploySCParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("gazLimit", "formData", "int64", raw)
	}
	o.GazLimit = &value

	return nil
}

// bindGazPrice binds and validates parameter GazPrice from formData.
func (o *CmdDeploySCParams) bindGazPrice(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCmdDeploySCParams()
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("gazPrice", "formData", "float64", raw)
	}
	o.GazPrice = &value

	return nil
}

// bindKeyID binds and validates parameter KeyID from formData.
func (o *CmdDeploySCParams) bindKeyID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCmdDeploySCParams()
		return nil
	}
	o.KeyID = &raw

	return nil
}

// bindNickname binds and validates parameter Nickname from formData.
func (o *CmdDeploySCParams) bindNickname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("nickname", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("nickname", "formData", raw); err != nil {
		return err
	}
	o.Nickname = raw

	return nil
}
