// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// MassaGetAddressesOKCode is the HTTP code returned for type MassaGetAddressesOK
const MassaGetAddressesOKCode int = 200

/*
MassaGetAddressesOK Addresses' infos retrieved

swagger:response massaGetAddressesOK
*/
type MassaGetAddressesOK struct {

	/*
	  In: Body
	*/
	Payload *MassaGetAddressesOKBody `json:"body,omitempty"`
}

// NewMassaGetAddressesOK creates MassaGetAddressesOK with default headers values
func NewMassaGetAddressesOK() *MassaGetAddressesOK {

	return &MassaGetAddressesOK{}
}

// WithPayload adds the payload to the massa get addresses o k response
func (o *MassaGetAddressesOK) WithPayload(payload *MassaGetAddressesOKBody) *MassaGetAddressesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the massa get addresses o k response
func (o *MassaGetAddressesOK) SetPayload(payload *MassaGetAddressesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MassaGetAddressesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MassaGetAddressesBadRequestCode is the HTTP code returned for type MassaGetAddressesBadRequest
const MassaGetAddressesBadRequestCode int = 400

/*
MassaGetAddressesBadRequest Bad request.

swagger:response massaGetAddressesBadRequest
*/
type MassaGetAddressesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMassaGetAddressesBadRequest creates MassaGetAddressesBadRequest with default headers values
func NewMassaGetAddressesBadRequest() *MassaGetAddressesBadRequest {

	return &MassaGetAddressesBadRequest{}
}

// WithPayload adds the payload to the massa get addresses bad request response
func (o *MassaGetAddressesBadRequest) WithPayload(payload *models.Error) *MassaGetAddressesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the massa get addresses bad request response
func (o *MassaGetAddressesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MassaGetAddressesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MassaGetAddressesInternalServerErrorCode is the HTTP code returned for type MassaGetAddressesInternalServerError
const MassaGetAddressesInternalServerErrorCode int = 500

/*
MassaGetAddressesInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response massaGetAddressesInternalServerError
*/
type MassaGetAddressesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMassaGetAddressesInternalServerError creates MassaGetAddressesInternalServerError with default headers values
func NewMassaGetAddressesInternalServerError() *MassaGetAddressesInternalServerError {

	return &MassaGetAddressesInternalServerError{}
}

// WithPayload adds the payload to the massa get addresses internal server error response
func (o *MassaGetAddressesInternalServerError) WithPayload(payload *models.Error) *MassaGetAddressesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the massa get addresses internal server error response
func (o *MassaGetAddressesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MassaGetAddressesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
