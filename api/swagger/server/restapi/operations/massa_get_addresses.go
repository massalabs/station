// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MassaGetAddressesHandlerFunc turns a function with the right signature into a massa get addresses handler
type MassaGetAddressesHandlerFunc func(MassaGetAddressesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MassaGetAddressesHandlerFunc) Handle(params MassaGetAddressesParams) middleware.Responder {
	return fn(params)
}

// MassaGetAddressesHandler interface for that can handle valid massa get addresses params
type MassaGetAddressesHandler interface {
	Handle(MassaGetAddressesParams) middleware.Responder
}

// NewMassaGetAddresses creates a new http.Handler for the massa get addresses operation
func NewMassaGetAddresses(ctx *middleware.Context, handler MassaGetAddressesHandler) *MassaGetAddresses {
	return &MassaGetAddresses{Context: ctx, Handler: handler}
}

/*
	MassaGetAddresses swagger:route POST /massa/addresses massaGetAddresses

MassaGetAddresses massa get addresses API
*/
type MassaGetAddresses struct {
	Context *middleware.Context
	Handler MassaGetAddressesHandler
}

func (o *MassaGetAddresses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMassaGetAddressesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// MassaGetAddressesBody massa get addresses body
//
// swagger:model MassaGetAddressesBody
type MassaGetAddressesBody struct {

	// Addresses to fetch info from
	// Required: true
	Addresses []string `json:"addresses"`

	// which output is required, for the moment only option avalaible is "balances"
	// Required: true
	Options []string `json:"options"`
}

// Validate validates this massa get addresses body
func (o *MassaGetAddressesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MassaGetAddressesBody) validateAddresses(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"addresses", "body", o.Addresses); err != nil {
		return err
	}

	return nil
}

func (o *MassaGetAddressesBody) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"options", "body", o.Options); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this massa get addresses body based on context it is used
func (o *MassaGetAddressesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MassaGetAddressesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MassaGetAddressesBody) UnmarshalBinary(b []byte) error {
	var res MassaGetAddressesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
