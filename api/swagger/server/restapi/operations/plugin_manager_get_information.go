// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginManagerGetInformationHandlerFunc turns a function with the right signature into a plugin manager get information handler
type PluginManagerGetInformationHandlerFunc func(PluginManagerGetInformationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PluginManagerGetInformationHandlerFunc) Handle(params PluginManagerGetInformationParams) middleware.Responder {
	return fn(params)
}

// PluginManagerGetInformationHandler interface for that can handle valid plugin manager get information params
type PluginManagerGetInformationHandler interface {
	Handle(PluginManagerGetInformationParams) middleware.Responder
}

// NewPluginManagerGetInformation creates a new http.Handler for the plugin manager get information operation
func NewPluginManagerGetInformation(ctx *middleware.Context, handler PluginManagerGetInformationHandler) *PluginManagerGetInformation {
	return &PluginManagerGetInformation{Context: ctx, Handler: handler}
}

/*
	PluginManagerGetInformation swagger:route GET /plugin-manager/{id} pluginManagerGetInformation

PluginManagerGetInformation plugin manager get information API
*/
type PluginManagerGetInformation struct {
	Context *middleware.Context
	Handler PluginManagerGetInformationHandler
}

func (o *PluginManagerGetInformation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPluginManagerGetInformationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PluginManagerGetInformationOKBody plugin manager get information o k body
//
// swagger:model PluginManagerGetInformationOKBody
type PluginManagerGetInformationOKBody struct {

	// Plugin status.
	// Enum: [Starting Up Down ShuttingDown Crashed]
	Status string `json:"status,omitempty"`
}

// Validate validates this plugin manager get information o k body
func (o *PluginManagerGetInformationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pluginManagerGetInformationOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Starting","Up","Down","ShuttingDown","Crashed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginManagerGetInformationOKBodyTypeStatusPropEnum = append(pluginManagerGetInformationOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// PluginManagerGetInformationOKBodyStatusStarting captures enum value "Starting"
	PluginManagerGetInformationOKBodyStatusStarting string = "Starting"

	// PluginManagerGetInformationOKBodyStatusUp captures enum value "Up"
	PluginManagerGetInformationOKBodyStatusUp string = "Up"

	// PluginManagerGetInformationOKBodyStatusDown captures enum value "Down"
	PluginManagerGetInformationOKBodyStatusDown string = "Down"

	// PluginManagerGetInformationOKBodyStatusShuttingDown captures enum value "ShuttingDown"
	PluginManagerGetInformationOKBodyStatusShuttingDown string = "ShuttingDown"

	// PluginManagerGetInformationOKBodyStatusCrashed captures enum value "Crashed"
	PluginManagerGetInformationOKBodyStatusCrashed string = "Crashed"
)

// prop value enum
func (o *PluginManagerGetInformationOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pluginManagerGetInformationOKBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PluginManagerGetInformationOKBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("pluginManagerGetInformationOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this plugin manager get information o k body based on context it is used
func (o *PluginManagerGetInformationOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PluginManagerGetInformationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PluginManagerGetInformationOKBody) UnmarshalBinary(b []byte) error {
	var res PluginManagerGetInformationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
