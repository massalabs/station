// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MgmtWalletCreateHandlerFunc turns a function with the right signature into a mgmt wallet create handler
type MgmtWalletCreateHandlerFunc func(MgmtWalletCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MgmtWalletCreateHandlerFunc) Handle(params MgmtWalletCreateParams) middleware.Responder {
	return fn(params)
}

// MgmtWalletCreateHandler interface for that can handle valid mgmt wallet create params
type MgmtWalletCreateHandler interface {
	Handle(MgmtWalletCreateParams) middleware.Responder
}

// NewMgmtWalletCreate creates a new http.Handler for the mgmt wallet create operation
func NewMgmtWalletCreate(ctx *middleware.Context, handler MgmtWalletCreateHandler) *MgmtWalletCreate {
	return &MgmtWalletCreate{Context: ctx, Handler: handler}
}

/* MgmtWalletCreate swagger:route POST /mgmt/wallet mgmtWalletCreate

MgmtWalletCreate mgmt wallet create API

*/
type MgmtWalletCreate struct {
	Context *middleware.Context
	Handler MgmtWalletCreateHandler
}

func (o *MgmtWalletCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMgmtWalletCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// MgmtWalletCreateBody mgmt wallet create body
//
// swagger:model MgmtWalletCreateBody
type MgmtWalletCreateBody struct {

	// Wallet's short name.
	// Required: true
	Nickname *string `json:"nickname"`

	// Private key password.
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this mgmt wallet create body
func (o *MgmtWalletCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MgmtWalletCreateBody) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"nickname", "body", o.Nickname); err != nil {
		return err
	}

	return nil
}

func (o *MgmtWalletCreateBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mgmt wallet create body based on context it is used
func (o *MgmtWalletCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MgmtWalletCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MgmtWalletCreateBody) UnmarshalBinary(b []byte) error {
	var res MgmtWalletCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
