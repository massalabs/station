// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// WebsiteCreatorUploadMissingChunksOKCode is the HTTP code returned for type WebsiteCreatorUploadMissingChunksOK
const WebsiteCreatorUploadMissingChunksOKCode int = 200

/*
WebsiteCreatorUploadMissingChunksOK Website's chunk deployed.

swagger:response websiteCreatorUploadMissingChunksOK
*/
type WebsiteCreatorUploadMissingChunksOK struct {

	/*
	  In: Body
	*/
	Payload *models.Websites `json:"body,omitempty"`
}

// NewWebsiteCreatorUploadMissingChunksOK creates WebsiteCreatorUploadMissingChunksOK with default headers values
func NewWebsiteCreatorUploadMissingChunksOK() *WebsiteCreatorUploadMissingChunksOK {

	return &WebsiteCreatorUploadMissingChunksOK{}
}

// WithPayload adds the payload to the website creator upload missing chunks o k response
func (o *WebsiteCreatorUploadMissingChunksOK) WithPayload(payload *models.Websites) *WebsiteCreatorUploadMissingChunksOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website creator upload missing chunks o k response
func (o *WebsiteCreatorUploadMissingChunksOK) SetPayload(payload *models.Websites) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteCreatorUploadMissingChunksOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteCreatorUploadMissingChunksBadRequestCode is the HTTP code returned for type WebsiteCreatorUploadMissingChunksBadRequest
const WebsiteCreatorUploadMissingChunksBadRequestCode int = 400

/*
WebsiteCreatorUploadMissingChunksBadRequest Bad request.

swagger:response websiteCreatorUploadMissingChunksBadRequest
*/
type WebsiteCreatorUploadMissingChunksBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteCreatorUploadMissingChunksBadRequest creates WebsiteCreatorUploadMissingChunksBadRequest with default headers values
func NewWebsiteCreatorUploadMissingChunksBadRequest() *WebsiteCreatorUploadMissingChunksBadRequest {

	return &WebsiteCreatorUploadMissingChunksBadRequest{}
}

// WithPayload adds the payload to the website creator upload missing chunks bad request response
func (o *WebsiteCreatorUploadMissingChunksBadRequest) WithPayload(payload *models.Error) *WebsiteCreatorUploadMissingChunksBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website creator upload missing chunks bad request response
func (o *WebsiteCreatorUploadMissingChunksBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteCreatorUploadMissingChunksBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteCreatorUploadMissingChunksUnprocessableEntityCode is the HTTP code returned for type WebsiteCreatorUploadMissingChunksUnprocessableEntity
const WebsiteCreatorUploadMissingChunksUnprocessableEntityCode int = 422

/*
WebsiteCreatorUploadMissingChunksUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response websiteCreatorUploadMissingChunksUnprocessableEntity
*/
type WebsiteCreatorUploadMissingChunksUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteCreatorUploadMissingChunksUnprocessableEntity creates WebsiteCreatorUploadMissingChunksUnprocessableEntity with default headers values
func NewWebsiteCreatorUploadMissingChunksUnprocessableEntity() *WebsiteCreatorUploadMissingChunksUnprocessableEntity {

	return &WebsiteCreatorUploadMissingChunksUnprocessableEntity{}
}

// WithPayload adds the payload to the website creator upload missing chunks unprocessable entity response
func (o *WebsiteCreatorUploadMissingChunksUnprocessableEntity) WithPayload(payload *models.Error) *WebsiteCreatorUploadMissingChunksUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website creator upload missing chunks unprocessable entity response
func (o *WebsiteCreatorUploadMissingChunksUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteCreatorUploadMissingChunksUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteCreatorUploadMissingChunksInternalServerErrorCode is the HTTP code returned for type WebsiteCreatorUploadMissingChunksInternalServerError
const WebsiteCreatorUploadMissingChunksInternalServerErrorCode int = 500

/*
WebsiteCreatorUploadMissingChunksInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response websiteCreatorUploadMissingChunksInternalServerError
*/
type WebsiteCreatorUploadMissingChunksInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteCreatorUploadMissingChunksInternalServerError creates WebsiteCreatorUploadMissingChunksInternalServerError with default headers values
func NewWebsiteCreatorUploadMissingChunksInternalServerError() *WebsiteCreatorUploadMissingChunksInternalServerError {

	return &WebsiteCreatorUploadMissingChunksInternalServerError{}
}

// WithPayload adds the payload to the website creator upload missing chunks internal server error response
func (o *WebsiteCreatorUploadMissingChunksInternalServerError) WithPayload(payload *models.Error) *WebsiteCreatorUploadMissingChunksInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website creator upload missing chunks internal server error response
func (o *WebsiteCreatorUploadMissingChunksInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteCreatorUploadMissingChunksInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
