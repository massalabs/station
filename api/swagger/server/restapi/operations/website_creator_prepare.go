// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebsiteCreatorPrepareHandlerFunc turns a function with the right signature into a website creator prepare handler
type WebsiteCreatorPrepareHandlerFunc func(WebsiteCreatorPrepareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebsiteCreatorPrepareHandlerFunc) Handle(params WebsiteCreatorPrepareParams) middleware.Responder {
	return fn(params)
}

// WebsiteCreatorPrepareHandler interface for that can handle valid website creator prepare params
type WebsiteCreatorPrepareHandler interface {
	Handle(WebsiteCreatorPrepareParams) middleware.Responder
}

// NewWebsiteCreatorPrepare creates a new http.Handler for the website creator prepare operation
func NewWebsiteCreatorPrepare(ctx *middleware.Context, handler WebsiteCreatorPrepareHandler) *WebsiteCreatorPrepare {
	return &WebsiteCreatorPrepare{Context: ctx, Handler: handler}
}

/* WebsiteCreatorPrepare swagger:route PUT /websiteCreator/prepare websiteCreatorPrepare

WebsiteCreatorPrepare website creator prepare API

*/
type WebsiteCreatorPrepare struct {
	Context *middleware.Context
	Handler WebsiteCreatorPrepareHandler
}

func (o *WebsiteCreatorPrepare) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebsiteCreatorPrepareParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WebsiteCreatorPrepareBody website creator prepare body
//
// swagger:model WebsiteCreatorPrepareBody
type WebsiteCreatorPrepareBody struct {

	// Wallet's nickname to be used for preparing the website
	// Required: true
	Nickname string `json:"nickname"`

	// URL without '.', capitals letters and specifics characters
	// Required: true
	URL string `json:"url"`
}

// Validate validates this website creator prepare body
func (o *WebsiteCreatorPrepareBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WebsiteCreatorPrepareBody) validateNickname(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"nickname", "body", o.Nickname); err != nil {
		return err
	}

	return nil
}

func (o *WebsiteCreatorPrepareBody) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this website creator prepare body based on context it is used
func (o *WebsiteCreatorPrepareBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WebsiteCreatorPrepareBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WebsiteCreatorPrepareBody) UnmarshalBinary(b []byte) error {
	var res WebsiteCreatorPrepareBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
