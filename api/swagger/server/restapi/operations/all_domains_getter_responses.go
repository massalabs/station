// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// AllDomainsGetterOKCode is the HTTP code returned for type AllDomainsGetterOK
const AllDomainsGetterOKCode int = 200

/*
AllDomainsGetterOK All domains returned.

swagger:response allDomainsGetterOK
*/
type AllDomainsGetterOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Registry `json:"body,omitempty"`
}

// NewAllDomainsGetterOK creates AllDomainsGetterOK with default headers values
func NewAllDomainsGetterOK() *AllDomainsGetterOK {

	return &AllDomainsGetterOK{}
}

// WithPayload adds the payload to the all domains getter o k response
func (o *AllDomainsGetterOK) WithPayload(payload []*models.Registry) *AllDomainsGetterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the all domains getter o k response
func (o *AllDomainsGetterOK) SetPayload(payload []*models.Registry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AllDomainsGetterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Registry, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// AllDomainsGetterBadRequestCode is the HTTP code returned for type AllDomainsGetterBadRequest
const AllDomainsGetterBadRequestCode int = 400

/*
AllDomainsGetterBadRequest Bad request.

swagger:response allDomainsGetterBadRequest
*/
type AllDomainsGetterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAllDomainsGetterBadRequest creates AllDomainsGetterBadRequest with default headers values
func NewAllDomainsGetterBadRequest() *AllDomainsGetterBadRequest {

	return &AllDomainsGetterBadRequest{}
}

// WithPayload adds the payload to the all domains getter bad request response
func (o *AllDomainsGetterBadRequest) WithPayload(payload *models.Error) *AllDomainsGetterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the all domains getter bad request response
func (o *AllDomainsGetterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AllDomainsGetterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AllDomainsGetterInternalServerErrorCode is the HTTP code returned for type AllDomainsGetterInternalServerError
const AllDomainsGetterInternalServerErrorCode int = 500

/*
AllDomainsGetterInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response allDomainsGetterInternalServerError
*/
type AllDomainsGetterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAllDomainsGetterInternalServerError creates AllDomainsGetterInternalServerError with default headers values
func NewAllDomainsGetterInternalServerError() *AllDomainsGetterInternalServerError {

	return &AllDomainsGetterInternalServerError{}
}

// WithPayload adds the payload to the all domains getter internal server error response
func (o *AllDomainsGetterInternalServerError) WithPayload(payload *models.Error) *AllDomainsGetterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the all domains getter internal server error response
func (o *AllDomainsGetterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AllDomainsGetterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
