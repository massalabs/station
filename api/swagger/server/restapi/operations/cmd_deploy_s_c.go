// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CmdDeploySCHandlerFunc turns a function with the right signature into a cmd deploy s c handler
type CmdDeploySCHandlerFunc func(CmdDeploySCParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CmdDeploySCHandlerFunc) Handle(params CmdDeploySCParams) middleware.Responder {
	return fn(params)
}

// CmdDeploySCHandler interface for that can handle valid cmd deploy s c params
type CmdDeploySCHandler interface {
	Handle(CmdDeploySCParams) middleware.Responder
}

// NewCmdDeploySC creates a new http.Handler for the cmd deploy s c operation
func NewCmdDeploySC(ctx *middleware.Context, handler CmdDeploySCHandler) *CmdDeploySC {
	return &CmdDeploySC{Context: ctx, Handler: handler}
}

/*
	CmdDeploySC swagger:route POST /cmd/deploySC cmdDeploySC

CmdDeploySC cmd deploy s c API
*/
type CmdDeploySC struct {
	Context *middleware.Context
	Handler CmdDeploySCHandler
}

func (o *CmdDeploySC) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCmdDeploySCParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
