// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KpiHandlerFunc turns a function with the right signature into a kpi handler
type KpiHandlerFunc func(KpiParams) middleware.Responder

// Handle executing the request and returning a response
func (fn KpiHandlerFunc) Handle(params KpiParams) middleware.Responder {
	return fn(params)
}

// KpiHandler interface for that can handle valid kpi params
type KpiHandler interface {
	Handle(KpiParams) middleware.Responder
}

// NewKpi creates a new http.Handler for the kpi operation
func NewKpi(ctx *middleware.Context, handler KpiHandler) *Kpi {
	return &Kpi{Context: ctx, Handler: handler}
}

/*
	Kpi swagger:route GET /kpi kpi

Kpi kpi API
*/
type Kpi struct {
	Context *middleware.Context
	Handler KpiHandler
}

func (o *Kpi) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewKpiParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// KpiOKBody kpi o k body
//
// swagger:model KpiOKBody
type KpiOKBody struct {

	// node
	Node []*KpiOKBodyNodeItems0 `json:"node"`

	// stacking
	Stacking []*KpiOKBodyStackingItems0 `json:"stacking"`

	// wallet
	Wallet []*KpiOKBodyWalletItems0 `json:"wallet"`
}

// Validate validates this kpi o k body
func (o *KpiOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStacking(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWallet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KpiOKBody) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(o.Node) { // not required
		return nil
	}

	for i := 0; i < len(o.Node); i++ {
		if swag.IsZero(o.Node[i]) { // not required
			continue
		}

		if o.Node[i] != nil {
			if err := o.Node[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiOK" + "." + "node" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiOK" + "." + "node" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KpiOKBody) validateStacking(formats strfmt.Registry) error {
	if swag.IsZero(o.Stacking) { // not required
		return nil
	}

	for i := 0; i < len(o.Stacking); i++ {
		if swag.IsZero(o.Stacking[i]) { // not required
			continue
		}

		if o.Stacking[i] != nil {
			if err := o.Stacking[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiOK" + "." + "stacking" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiOK" + "." + "stacking" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KpiOKBody) validateWallet(formats strfmt.Registry) error {
	if swag.IsZero(o.Wallet) { // not required
		return nil
	}

	for i := 0; i < len(o.Wallet); i++ {
		if swag.IsZero(o.Wallet[i]) { // not required
			continue
		}

		if o.Wallet[i] != nil {
			if err := o.Wallet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiOK" + "." + "wallet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiOK" + "." + "wallet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kpi o k body based on the context it is used
func (o *KpiOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStacking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWallet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KpiOKBody) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Node); i++ {

		if o.Node[i] != nil {
			if err := o.Node[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiOK" + "." + "node" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiOK" + "." + "node" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KpiOKBody) contextValidateStacking(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Stacking); i++ {

		if o.Stacking[i] != nil {
			if err := o.Stacking[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiOK" + "." + "stacking" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiOK" + "." + "stacking" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KpiOKBody) contextValidateWallet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Wallet); i++ {

		if o.Wallet[i] != nil {
			if err := o.Wallet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kpiOK" + "." + "wallet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kpiOK" + "." + "wallet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *KpiOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KpiOKBody) UnmarshalBinary(b []byte) error {
	var res KpiOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// KpiOKBodyNodeItems0 kpi o k body node items0
//
// swagger:model KpiOKBodyNodeItems0
type KpiOKBodyNodeItems0 struct {

	// cpu
	CPU []float64 `json:"cpu"`

	// memory
	Memory []float64 `json:"memory"`

	// network
	Network []float64 `json:"network"`

	// storage
	Storage []float64 `json:"storage"`
}

// Validate validates this kpi o k body node items0
func (o *KpiOKBodyNodeItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kpi o k body node items0 based on context it is used
func (o *KpiOKBodyNodeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KpiOKBodyNodeItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KpiOKBodyNodeItems0) UnmarshalBinary(b []byte) error {
	var res KpiOKBodyNodeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// KpiOKBodyStackingItems0 kpi o k body stacking items0
//
// swagger:model KpiOKBodyStackingItems0
type KpiOKBodyStackingItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// gains
	Gains float64 `json:"gains,omitempty"`

	// rolls
	Rolls int64 `json:"rolls,omitempty"`

	// slashing
	Slashing int64 `json:"slashing,omitempty"`
}

// Validate validates this kpi o k body stacking items0
func (o *KpiOKBodyStackingItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kpi o k body stacking items0 based on context it is used
func (o *KpiOKBodyStackingItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KpiOKBodyStackingItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KpiOKBodyStackingItems0) UnmarshalBinary(b []byte) error {
	var res KpiOKBodyStackingItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// KpiOKBodyWalletItems0 kpi o k body wallet items0
//
// swagger:model KpiOKBodyWalletItems0
type KpiOKBodyWalletItems0 struct {

	// balance
	Balance float64 `json:"balance,omitempty"`

	// coin
	Coin string `json:"coin,omitempty"`
}

// Validate validates this kpi o k body wallet items0
func (o *KpiOKBodyWalletItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kpi o k body wallet items0 based on context it is used
func (o *KpiOKBodyWalletItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KpiOKBodyWalletItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KpiOKBodyWalletItems0) UnmarshalBinary(b []byte) error {
	var res KpiOKBodyWalletItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
