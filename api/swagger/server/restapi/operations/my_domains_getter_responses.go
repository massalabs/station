// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// MyDomainsGetterOKCode is the HTTP code returned for type MyDomainsGetterOK
const MyDomainsGetterOKCode int = 200

/*MyDomainsGetterOK Domains returned. May be empty.

swagger:response myDomainsGetterOK
*/
type MyDomainsGetterOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Websites `json:"body,omitempty"`
}

// NewMyDomainsGetterOK creates MyDomainsGetterOK with default headers values
func NewMyDomainsGetterOK() *MyDomainsGetterOK {

	return &MyDomainsGetterOK{}
}

// WithPayload adds the payload to the my domains getter o k response
func (o *MyDomainsGetterOK) WithPayload(payload []*models.Websites) *MyDomainsGetterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the my domains getter o k response
func (o *MyDomainsGetterOK) SetPayload(payload []*models.Websites) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MyDomainsGetterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Websites, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// MyDomainsGetterBadRequestCode is the HTTP code returned for type MyDomainsGetterBadRequest
const MyDomainsGetterBadRequestCode int = 400

/*MyDomainsGetterBadRequest Bad request.

swagger:response myDomainsGetterBadRequest
*/
type MyDomainsGetterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMyDomainsGetterBadRequest creates MyDomainsGetterBadRequest with default headers values
func NewMyDomainsGetterBadRequest() *MyDomainsGetterBadRequest {

	return &MyDomainsGetterBadRequest{}
}

// WithPayload adds the payload to the my domains getter bad request response
func (o *MyDomainsGetterBadRequest) WithPayload(payload *models.Error) *MyDomainsGetterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the my domains getter bad request response
func (o *MyDomainsGetterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MyDomainsGetterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MyDomainsGetterInternalServerErrorCode is the HTTP code returned for type MyDomainsGetterInternalServerError
const MyDomainsGetterInternalServerErrorCode int = 500

/*MyDomainsGetterInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response myDomainsGetterInternalServerError
*/
type MyDomainsGetterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMyDomainsGetterInternalServerError creates MyDomainsGetterInternalServerError with default headers values
func NewMyDomainsGetterInternalServerError() *MyDomainsGetterInternalServerError {

	return &MyDomainsGetterInternalServerError{}
}

// WithPayload adds the payload to the my domains getter internal server error response
func (o *MyDomainsGetterInternalServerError) WithPayload(payload *models.Error) *MyDomainsGetterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the my domains getter internal server error response
func (o *MyDomainsGetterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MyDomainsGetterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
