// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ThyraPluginManagerHandlerFunc turns a function with the right signature into a thyra plugin manager handler
type ThyraPluginManagerHandlerFunc func(ThyraPluginManagerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ThyraPluginManagerHandlerFunc) Handle(params ThyraPluginManagerParams) middleware.Responder {
	return fn(params)
}

// ThyraPluginManagerHandler interface for that can handle valid thyra plugin manager params
type ThyraPluginManagerHandler interface {
	Handle(ThyraPluginManagerParams) middleware.Responder
}

// NewThyraPluginManager creates a new http.Handler for the thyra plugin manager operation
func NewThyraPluginManager(ctx *middleware.Context, handler ThyraPluginManagerHandler) *ThyraPluginManager {
	return &ThyraPluginManager{Context: ctx, Handler: handler}
}

/*
	ThyraPluginManager swagger:route GET /thyra/plugin-manager/{resource} thyraPluginManager

ThyraPluginManager thyra plugin manager API
*/
type ThyraPluginManager struct {
	Context *middleware.Context
	Handler ThyraPluginManagerHandler
}

func (o *ThyraPluginManager) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewThyraPluginManagerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
