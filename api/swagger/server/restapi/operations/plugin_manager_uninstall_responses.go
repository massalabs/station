// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// PluginManagerUninstallNoContentCode is the HTTP code returned for type PluginManagerUninstallNoContent
const PluginManagerUninstallNoContentCode int = 204

/*
PluginManagerUninstallNoContent Plugin successfuly remove from the system.

swagger:response pluginManagerUninstallNoContent
*/
type PluginManagerUninstallNoContent struct {
}

// NewPluginManagerUninstallNoContent creates PluginManagerUninstallNoContent with default headers values
func NewPluginManagerUninstallNoContent() *PluginManagerUninstallNoContent {

	return &PluginManagerUninstallNoContent{}
}

// WriteResponse to the client
func (o *PluginManagerUninstallNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PluginManagerUninstallBadRequestCode is the HTTP code returned for type PluginManagerUninstallBadRequest
const PluginManagerUninstallBadRequestCode int = 400

/*
PluginManagerUninstallBadRequest Bad request.

swagger:response pluginManagerUninstallBadRequest
*/
type PluginManagerUninstallBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerUninstallBadRequest creates PluginManagerUninstallBadRequest with default headers values
func NewPluginManagerUninstallBadRequest() *PluginManagerUninstallBadRequest {

	return &PluginManagerUninstallBadRequest{}
}

// WithPayload adds the payload to the plugin manager uninstall bad request response
func (o *PluginManagerUninstallBadRequest) WithPayload(payload *models.Error) *PluginManagerUninstallBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager uninstall bad request response
func (o *PluginManagerUninstallBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerUninstallBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PluginManagerUninstallNotFoundCode is the HTTP code returned for type PluginManagerUninstallNotFound
const PluginManagerUninstallNotFoundCode int = 404

/*
PluginManagerUninstallNotFound Not found.

swagger:response pluginManagerUninstallNotFound
*/
type PluginManagerUninstallNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerUninstallNotFound creates PluginManagerUninstallNotFound with default headers values
func NewPluginManagerUninstallNotFound() *PluginManagerUninstallNotFound {

	return &PluginManagerUninstallNotFound{}
}

// WithPayload adds the payload to the plugin manager uninstall not found response
func (o *PluginManagerUninstallNotFound) WithPayload(payload *models.Error) *PluginManagerUninstallNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager uninstall not found response
func (o *PluginManagerUninstallNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerUninstallNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PluginManagerUninstallUnprocessableEntityCode is the HTTP code returned for type PluginManagerUninstallUnprocessableEntity
const PluginManagerUninstallUnprocessableEntityCode int = 422

/*
PluginManagerUninstallUnprocessableEntity Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.

swagger:response pluginManagerUninstallUnprocessableEntity
*/
type PluginManagerUninstallUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerUninstallUnprocessableEntity creates PluginManagerUninstallUnprocessableEntity with default headers values
func NewPluginManagerUninstallUnprocessableEntity() *PluginManagerUninstallUnprocessableEntity {

	return &PluginManagerUninstallUnprocessableEntity{}
}

// WithPayload adds the payload to the plugin manager uninstall unprocessable entity response
func (o *PluginManagerUninstallUnprocessableEntity) WithPayload(payload *models.Error) *PluginManagerUninstallUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager uninstall unprocessable entity response
func (o *PluginManagerUninstallUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerUninstallUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PluginManagerUninstallInternalServerErrorCode is the HTTP code returned for type PluginManagerUninstallInternalServerError
const PluginManagerUninstallInternalServerErrorCode int = 500

/*
PluginManagerUninstallInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response pluginManagerUninstallInternalServerError
*/
type PluginManagerUninstallInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerUninstallInternalServerError creates PluginManagerUninstallInternalServerError with default headers values
func NewPluginManagerUninstallInternalServerError() *PluginManagerUninstallInternalServerError {

	return &PluginManagerUninstallInternalServerError{}
}

// WithPayload adds the payload to the plugin manager uninstall internal server error response
func (o *PluginManagerUninstallInternalServerError) WithPayload(payload *models.Error) *PluginManagerUninstallInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager uninstall internal server error response
func (o *PluginManagerUninstallInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerUninstallInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
