// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// PluginManagerInstallNoContentCode is the HTTP code returned for type PluginManagerInstallNoContent
const PluginManagerInstallNoContentCode int = 204

/*
PluginManagerInstallNoContent Plugin successfully installed

swagger:response pluginManagerInstallNoContent
*/
type PluginManagerInstallNoContent struct {
}

// NewPluginManagerInstallNoContent creates PluginManagerInstallNoContent with default headers values
func NewPluginManagerInstallNoContent() *PluginManagerInstallNoContent {

	return &PluginManagerInstallNoContent{}
}

// WriteResponse to the client
func (o *PluginManagerInstallNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PluginManagerInstallBadRequestCode is the HTTP code returned for type PluginManagerInstallBadRequest
const PluginManagerInstallBadRequestCode int = 400

/*
PluginManagerInstallBadRequest Bad request.

swagger:response pluginManagerInstallBadRequest
*/
type PluginManagerInstallBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerInstallBadRequest creates PluginManagerInstallBadRequest with default headers values
func NewPluginManagerInstallBadRequest() *PluginManagerInstallBadRequest {

	return &PluginManagerInstallBadRequest{}
}

// WithPayload adds the payload to the plugin manager install bad request response
func (o *PluginManagerInstallBadRequest) WithPayload(payload *models.Error) *PluginManagerInstallBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager install bad request response
func (o *PluginManagerInstallBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerInstallBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PluginManagerInstallNotFoundCode is the HTTP code returned for type PluginManagerInstallNotFound
const PluginManagerInstallNotFoundCode int = 404

/*
PluginManagerInstallNotFound Not found.

swagger:response pluginManagerInstallNotFound
*/
type PluginManagerInstallNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerInstallNotFound creates PluginManagerInstallNotFound with default headers values
func NewPluginManagerInstallNotFound() *PluginManagerInstallNotFound {

	return &PluginManagerInstallNotFound{}
}

// WithPayload adds the payload to the plugin manager install not found response
func (o *PluginManagerInstallNotFound) WithPayload(payload *models.Error) *PluginManagerInstallNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager install not found response
func (o *PluginManagerInstallNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerInstallNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PluginManagerInstallUnprocessableEntityCode is the HTTP code returned for type PluginManagerInstallUnprocessableEntity
const PluginManagerInstallUnprocessableEntityCode int = 422

/*
PluginManagerInstallUnprocessableEntity Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.

swagger:response pluginManagerInstallUnprocessableEntity
*/
type PluginManagerInstallUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerInstallUnprocessableEntity creates PluginManagerInstallUnprocessableEntity with default headers values
func NewPluginManagerInstallUnprocessableEntity() *PluginManagerInstallUnprocessableEntity {

	return &PluginManagerInstallUnprocessableEntity{}
}

// WithPayload adds the payload to the plugin manager install unprocessable entity response
func (o *PluginManagerInstallUnprocessableEntity) WithPayload(payload *models.Error) *PluginManagerInstallUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager install unprocessable entity response
func (o *PluginManagerInstallUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerInstallUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PluginManagerInstallInternalServerErrorCode is the HTTP code returned for type PluginManagerInstallInternalServerError
const PluginManagerInstallInternalServerErrorCode int = 500

/*
PluginManagerInstallInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response pluginManagerInstallInternalServerError
*/
type PluginManagerInstallInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPluginManagerInstallInternalServerError creates PluginManagerInstallInternalServerError with default headers values
func NewPluginManagerInstallInternalServerError() *PluginManagerInstallInternalServerError {

	return &PluginManagerInstallInternalServerError{}
}

// WithPayload adds the payload to the plugin manager install internal server error response
func (o *PluginManagerInstallInternalServerError) WithPayload(payload *models.Error) *PluginManagerInstallInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin manager install internal server error response
func (o *PluginManagerInstallInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginManagerInstallInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
