// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Thyra HTTP server API.",
    "title": "thyra-server",
    "version": "0.0.0"
  },
  "paths": {
    "/all/domains": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "allDomainsGetter",
        "responses": {
          "200": {
            "description": "All domains returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Registry"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/browse/{address}/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "browse",
        "parameters": [
          {
            "type": "string",
            "description": "Address containing the website.",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource retrieved."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cmd/deploySC": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "cmdDeploySC",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Name of the wallet used to deploy the smart contract.",
            "name": "walletNickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Smart contract file in a Wasm format.",
            "name": "smartContract",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "default": 0,
            "description": "Price of a gaz unit.",
            "name": "gazPrice",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "uint64",
            "default": 700000000,
            "description": "Maximum number of gaz unit that a node will be able to consume.",
            "name": "gazLimit",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "uint64",
            "default": 0,
            "description": "Set the number of coins that will be sent along the deployment call.",
            "name": "coins",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "uint64",
            "default": 2,
            "description": "Set the expiry duration (in number of slots) of the transaction.",
            "name": "expiry",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "uint64",
            "default": 0,
            "description": "Set the fee amount (in massa) that will be given to the block creator.",
            "name": "fee",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "",
            "description": "b64 encoded datastore that will be sent along the smart contract.",
            "name": "datastore",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "description": "Operation id.",
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cmd/executeFunction": {
      "post": {
        "produces": [
          "application/json"
        ],
        "operationId": "cmdExecuteFunction",
        "parameters": [
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "default": {
                "args": "",
                "at": "A1MrqLgWq5XXDpTBH6fzXHUg7E8M5U2fYDAF3E1xnUSzyZuKpMh",
                "coins": 0,
                "expiry": 3,
                "fee": 0,
                "gaz": {
                  "limit": 700000000,
                  "price": 0
                },
                "keyId": "default",
                "name": "test",
                "nickname": "test"
              },
              "required": [
                "nickname",
                "name",
                "at"
              ],
              "properties": {
                "args": {
                  "description": "Arguments to pass to the function.",
                  "type": "string",
                  "default": ""
                },
                "at": {
                  "description": "Smart contract address exporting the function to call.",
                  "type": "string",
                  "x-nullable": false
                },
                "coins": {
                  "description": "Set the fee amount (in massa) that will be given to the block creator.",
                  "type": "number",
                  "default": 0
                },
                "expiry": {
                  "description": "Set the expiry duration (in number of slots) of the transaction.",
                  "type": "integer",
                  "default": 3
                },
                "fee": {
                  "description": "Set the fee amount (in massa) that will be given to the block creator.",
                  "type": "number",
                  "default": 0
                },
                "gaz": {
                  "description": "Gaz attibutes. Gaz is a virtual resource consumed by node while running smart contract.",
                  "type": "object",
                  "properties": {
                    "limit": {
                      "description": "Maximum number of gaz unit that a node will be able consume.",
                      "type": "integer",
                      "default": 700000000
                    },
                    "price": {
                      "description": "Price of a gaz unit.",
                      "type": "number",
                      "default": 0
                    }
                  }
                },
                "keyId": {
                  "description": "Defines the key to used to sign the transaction.",
                  "type": "string",
                  "default": "default"
                },
                "name": {
                  "description": "Function name to call.",
                  "type": "string",
                  "x-nullable": false
                },
                "nickname": {
                  "description": "Wallet's short name.",
                  "type": "string",
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "description": "Operation id.",
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kpi": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "kpi",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "wallet",
                "node",
                "stacking",
                "blockchain"
              ],
              "type": "string"
            },
            "collectionFormat": "csv",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "kpi message.",
            "schema": {
              "type": "object",
              "properties": {
                "node": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "memory": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "network": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "storage": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "stacking": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "gains": {
                        "type": "number"
                      },
                      "rolls": {
                        "type": "integer"
                      },
                      "slashing": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "wallet": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "balance": {
                        "type": "number"
                      },
                      "coin": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/massa/addresses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "massaGetAddresses",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "balance"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies the attributes to return. If no attributes are provided, they are all returned.\nPossible values:\n\n| Attribute | Content |\n| ----------- | -----------|\n| balance | the pending balances (takes into account pending/non-final operations) and the final balances (takes into account only final operations). |\n",
            "name": "attributes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-nullable": false,
            "description": "list of wanted addresses",
            "name": "addresses",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses' infos retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "addressesAttributes": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "address key",
                    "type": "object",
                    "properties": {
                      "balance": {
                        "type": "object",
                        "properties": {
                          "final": {
                            "type": "string"
                          },
                          "pending": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/my/domains/{nickname}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "myDomainsGetter",
        "parameters": [
          {
            "type": "string",
            "description": "Wallet's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Domains returned. May be empty.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Websites"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager": {
      "get": {
        "operationId": "pluginManagerList",
        "responses": {
          "200": {
            "description": "List all installed plugins.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "Plugin description.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "home": {
                    "description": "Plugin home Url.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "id": {
                    "description": "Plugin identifier.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "logo": {
                    "description": "Plugin logo Url.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "name": {
                    "description": "Plugin name.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "status": {
                    "description": "Plugin status.",
                    "enum": [
                      "Starting",
                      "Up",
                      "Down",
                      "ShuttingDown",
                      "Crashed"
                    ],
                    "x-nullable": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "operationId": "pluginManagerInstall",
        "parameters": [
          {
            "type": "string",
            "format": "url",
            "x-nullable": false,
            "description": "URL from which to retrieve the plug-in.",
            "name": "source",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Plugin successfully installed"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager/register": {
      "post": {
        "operationId": "pluginManagerRegister",
        "parameters": [
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id",
                "name",
                "author",
                "description",
                "logo",
                "url",
                "api-spec"
              ],
              "properties": {
                "api_spec": {
                  "description": "Plugin API specification",
                  "type": "string",
                  "x-nullable": false
                },
                "author": {
                  "description": "Plugin author.",
                  "type": "string",
                  "x-nullable": false
                },
                "description": {
                  "description": "Plugin description.",
                  "type": "string",
                  "x-nullable": false
                },
                "home": {
                  "description": "Plugin home url.",
                  "type": "string",
                  "x-nullable": false
                },
                "id": {
                  "description": "Plugin identifier.",
                  "type": "string",
                  "x-nullable": false
                },
                "logo": {
                  "description": "Plugin logo.",
                  "type": "string",
                  "x-nullable": false
                },
                "name": {
                  "description": "Plugin name.",
                  "type": "string",
                  "x-nullable": false
                },
                "url": {
                  "description": "URL authority to use to connect to the plugin",
                  "type": "string",
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plugin successfully installed"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager/{id}": {
      "get": {
        "operationId": "pluginManagerGetInformation",
        "parameters": [
          {
            "type": "string",
            "description": "Plugin identifier.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get execution information from the plugin.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Plugin status.",
                  "type": "string",
                  "enum": [
                    "Starting",
                    "Up",
                    "Down",
                    "ShuttingDown",
                    "Crashed"
                  ],
                  "x-nullable": false
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "pluginManagerUninstall",
        "parameters": [
          {
            "type": "string",
            "description": "Plugin identifier.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Plugin successfuly remove from the system."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager/{id}/execute": {
      "post": {
        "operationId": "pluginManagerExecuteCommand",
        "parameters": [
          {
            "type": "string",
            "description": "Plugin unique identifier.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "command"
              ],
              "properties": {
                "command": {
                  "description": "Command to execute.",
                  "type": "string",
                  "enum": [
                    "update",
                    "stop",
                    "start",
                    "restart"
                  ],
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Command successfuly executed."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "Not Implemented - the server does not support the functionality required to fulfill the request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-store": {
      "get": {
        "description": "Returns a list of PluginStoreItem structs",
        "produces": [
          "application/json"
        ],
        "summary": "Get list of available plugins from store",
        "operationId": "getPluginStore",
        "responses": {
          "200": {
            "description": "List of plugins",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PluginStoreItem"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/events/{str}/{caller}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "thyraEventsGetter",
        "parameters": [
          {
            "type": "string",
            "description": "Data content of the event.",
            "name": "str",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Creator of the transaction that triggered the event.",
            "name": "caller",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/home/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "thyraHome",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/plugin-manager/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "thyraPluginManager",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/plugin/{author-name}/{plugin-name}": {
      "get": {
        "description": "virtual endpoint handling requests for third party plugin. The actual handler is defined as an HTTP handler middleware.",
        "operationId": "pluginRouter",
        "parameters": [
          {
            "type": "string",
            "description": "Author of the plugin.",
            "name": "author-name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the plugin.",
            "name": "plugin-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dumb response. All content and HTTP code are possible for this endpoint."
          }
        }
      }
    },
    "/thyra/registry/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "thyraRegistry",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          }
        }
      }
    },
    "/thyra/websiteCreator/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "thyraWebsiteCreator",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/websiteCreator/prepare": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "websiteCreatorPrepare",
        "parameters": [
          {
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "x-nullable": false,
            "description": "URL without dot (.), upper case and special characters",
            "name": "url",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Name of the Wallet in which the website will be deployed.",
            "name": "nickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Website contents in a ZIP file.",
            "name": "zipfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New website created.",
            "schema": {
              "$ref": "#/definitions/Websites"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/websiteCreator/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "websiteCreatorUpload",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Address where to deploy website. The account must have been prepare to receive a website.",
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Wallet's nickname to be used for receiving the website",
            "name": "nickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Website contents in a ZIP file.",
            "name": "zipfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Website's chunk deployed.",
            "schema": {
              "$ref": "#/definitions/Websites"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/websiteCreator/uploadMissingChunks": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "websiteUploadMissingChunks",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Address where to deploy website. The account must have been prepare to receive a website.",
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Wallet's nickname to be used for receiving the website",
            "name": "nickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Website contents in a ZIP file.",
            "name": "zipfile",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Website missing chunks",
            "name": "missedChunks",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Website's chunk deployed.",
            "schema": {
              "$ref": "#/definitions/Websites"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "description": "Error object.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "error code.",
          "type": "string",
          "x-nullable": false
        },
        "message": {
          "description": "error message.",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Events": {
      "description": "Events object (V0)",
      "type": "object",
      "properties": {
        "address": {
          "description": "Event caller.",
          "type": "string"
        },
        "data": {
          "description": "Event data.",
          "type": "string"
        }
      }
    },
    "File": {
      "type": "object",
      "required": [
        "url",
        "checksum"
      ],
      "properties": {
        "checksum": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "PluginStoreItem": {
      "description": "Plugin item from store.",
      "type": "object",
      "required": [
        "name",
        "description",
        "version",
        "url",
        "file"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/File"
        },
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Registry": {
      "description": "Registry object (V0).",
      "type": "object",
      "properties": {
        "address": {
          "description": "Website's address.",
          "type": "string"
        },
        "metadata": {
          "description": "byte array as string including created_at and updated_at values",
          "type": "string",
          "format": "byte"
        },
        "name": {
          "description": "Website's name.",
          "type": "string"
        }
      }
    },
    "Websites": {
      "description": "Websites object (V0).",
      "type": "object",
      "properties": {
        "address": {
          "description": "Website's address.",
          "type": "string"
        },
        "brokenChunks": {
          "description": "Array of empty chunks if website contains preventing the website to load.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Website's name.",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Thyra HTTP server API.",
    "title": "thyra-server",
    "version": "0.0.0"
  },
  "paths": {
    "/all/domains": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "allDomainsGetter",
        "responses": {
          "200": {
            "description": "All domains returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Registry"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/browse/{address}/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "image/png",
          "text/css",
          "text/html",
          "text/webp"
        ],
        "operationId": "browse",
        "parameters": [
          {
            "type": "string",
            "description": "Address containing the website.",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource retrieved."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cmd/deploySC": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "cmdDeploySC",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Name of the wallet used to deploy the smart contract.",
            "name": "walletNickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Smart contract file in a Wasm format.",
            "name": "smartContract",
            "in": "formData",
            "required": true
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "uint64",
            "default": 0,
            "description": "Price of a gaz unit.",
            "name": "gazPrice",
            "in": "formData"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "uint64",
            "default": 700000000,
            "description": "Maximum number of gaz unit that a node will be able to consume.",
            "name": "gazLimit",
            "in": "formData"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "uint64",
            "default": 0,
            "description": "Set the number of coins that will be sent along the deployment call.",
            "name": "coins",
            "in": "formData"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "uint64",
            "default": 2,
            "description": "Set the expiry duration (in number of slots) of the transaction.",
            "name": "expiry",
            "in": "formData"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "uint64",
            "default": 0,
            "description": "Set the fee amount (in massa) that will be given to the block creator.",
            "name": "fee",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "",
            "description": "b64 encoded datastore that will be sent along the smart contract.",
            "name": "datastore",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "description": "Operation id.",
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cmd/executeFunction": {
      "post": {
        "produces": [
          "application/json"
        ],
        "operationId": "cmdExecuteFunction",
        "parameters": [
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "default": {
                "args": "",
                "at": "A1MrqLgWq5XXDpTBH6fzXHUg7E8M5U2fYDAF3E1xnUSzyZuKpMh",
                "coins": 0,
                "expiry": 3,
                "fee": 0,
                "gaz": {
                  "limit": 700000000,
                  "price": 0
                },
                "keyId": "default",
                "name": "test",
                "nickname": "test"
              },
              "required": [
                "nickname",
                "name",
                "at"
              ],
              "properties": {
                "args": {
                  "description": "Arguments to pass to the function.",
                  "type": "string",
                  "default": ""
                },
                "at": {
                  "description": "Smart contract address exporting the function to call.",
                  "type": "string",
                  "x-nullable": false
                },
                "coins": {
                  "description": "Set the fee amount (in massa) that will be given to the block creator.",
                  "type": "number",
                  "default": 0
                },
                "expiry": {
                  "description": "Set the expiry duration (in number of slots) of the transaction.",
                  "type": "integer",
                  "default": 3
                },
                "fee": {
                  "description": "Set the fee amount (in massa) that will be given to the block creator.",
                  "type": "number",
                  "default": 0
                },
                "gaz": {
                  "description": "Gaz attibutes. Gaz is a virtual resource consumed by node while running smart contract.",
                  "type": "object",
                  "properties": {
                    "limit": {
                      "description": "Maximum number of gaz unit that a node will be able consume.",
                      "type": "integer",
                      "default": 700000000
                    },
                    "price": {
                      "description": "Price of a gaz unit.",
                      "type": "number",
                      "default": 0
                    }
                  }
                },
                "keyId": {
                  "description": "Defines the key to used to sign the transaction.",
                  "type": "string",
                  "default": "default"
                },
                "name": {
                  "description": "Function name to call.",
                  "type": "string",
                  "x-nullable": false
                },
                "nickname": {
                  "description": "Wallet's short name.",
                  "type": "string",
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "description": "Operation id.",
              "type": "string"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kpi": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "kpi",
        "parameters": [
          {
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "wallet",
                "node",
                "stacking",
                "blockchain"
              ],
              "type": "string"
            },
            "collectionFormat": "csv",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "kpi message.",
            "schema": {
              "type": "object",
              "properties": {
                "node": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NodeItems0"
                  }
                },
                "stacking": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/StackingItems0"
                  }
                },
                "wallet": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WalletItems0"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/massa/addresses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "massaGetAddresses",
        "parameters": [
          {
            "type": "array",
            "items": {
              "enum": [
                "balance"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Specifies the attributes to return. If no attributes are provided, they are all returned.\nPossible values:\n\n| Attribute | Content |\n| ----------- | -----------|\n| balance | the pending balances (takes into account pending/non-final operations) and the final balances (takes into account only final operations). |\n",
            "name": "attributes",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-nullable": false,
            "description": "list of wanted addresses",
            "name": "addresses",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses' infos retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "addressesAttributes": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/AddressesAttributesAnon"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/my/domains/{nickname}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "myDomainsGetter",
        "parameters": [
          {
            "type": "string",
            "description": "Wallet's short name.",
            "name": "nickname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Domains returned. May be empty.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Websites"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager": {
      "get": {
        "operationId": "pluginManagerList",
        "responses": {
          "200": {
            "description": "List all installed plugins.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PluginManagerListOKBodyItems0"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "operationId": "pluginManagerInstall",
        "parameters": [
          {
            "type": "string",
            "format": "url",
            "x-nullable": false,
            "description": "URL from which to retrieve the plug-in.",
            "name": "source",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Plugin successfully installed"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager/register": {
      "post": {
        "operationId": "pluginManagerRegister",
        "parameters": [
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id",
                "name",
                "author",
                "description",
                "logo",
                "url",
                "api-spec"
              ],
              "properties": {
                "api_spec": {
                  "description": "Plugin API specification",
                  "type": "string",
                  "x-nullable": false
                },
                "author": {
                  "description": "Plugin author.",
                  "type": "string",
                  "x-nullable": false
                },
                "description": {
                  "description": "Plugin description.",
                  "type": "string",
                  "x-nullable": false
                },
                "home": {
                  "description": "Plugin home url.",
                  "type": "string",
                  "x-nullable": false
                },
                "id": {
                  "description": "Plugin identifier.",
                  "type": "string",
                  "x-nullable": false
                },
                "logo": {
                  "description": "Plugin logo.",
                  "type": "string",
                  "x-nullable": false
                },
                "name": {
                  "description": "Plugin name.",
                  "type": "string",
                  "x-nullable": false
                },
                "url": {
                  "description": "URL authority to use to connect to the plugin",
                  "type": "string",
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plugin successfully installed"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager/{id}": {
      "get": {
        "operationId": "pluginManagerGetInformation",
        "parameters": [
          {
            "type": "string",
            "description": "Plugin identifier.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get execution information from the plugin.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Plugin status.",
                  "type": "string",
                  "enum": [
                    "Starting",
                    "Up",
                    "Down",
                    "ShuttingDown",
                    "Crashed"
                  ],
                  "x-nullable": false
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "pluginManagerUninstall",
        "parameters": [
          {
            "type": "string",
            "description": "Plugin identifier.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Plugin successfuly remove from the system."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-manager/{id}/execute": {
      "post": {
        "operationId": "pluginManagerExecuteCommand",
        "parameters": [
          {
            "type": "string",
            "description": "Plugin unique identifier.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-nullable": false,
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "command"
              ],
              "properties": {
                "command": {
                  "description": "Command to execute.",
                  "type": "string",
                  "enum": [
                    "update",
                    "stop",
                    "start",
                    "restart"
                  ],
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Command successfuly executed."
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "Not Implemented - the server does not support the functionality required to fulfill the request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plugin-store": {
      "get": {
        "description": "Returns a list of PluginStoreItem structs",
        "produces": [
          "application/json"
        ],
        "summary": "Get list of available plugins from store",
        "operationId": "getPluginStore",
        "responses": {
          "200": {
            "description": "List of plugins",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PluginStoreItem"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - The syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/events/{str}/{caller}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "thyraEventsGetter",
        "parameters": [
          {
            "type": "string",
            "description": "Data content of the event.",
            "name": "str",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Creator of the transaction that triggered the event.",
            "name": "caller",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/home/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "image/png",
          "text/css",
          "text/html",
          "text/javascript",
          "text/webp"
        ],
        "operationId": "thyraHome",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/plugin-manager/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "image/png",
          "text/css",
          "text/html",
          "text/javascript",
          "text/webp"
        ],
        "operationId": "thyraPluginManager",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thyra/plugin/{author-name}/{plugin-name}": {
      "get": {
        "description": "virtual endpoint handling requests for third party plugin. The actual handler is defined as an HTTP handler middleware.",
        "operationId": "pluginRouter",
        "parameters": [
          {
            "type": "string",
            "description": "Author of the plugin.",
            "name": "author-name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the plugin.",
            "name": "plugin-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dumb response. All content and HTTP code are possible for this endpoint."
          }
        }
      }
    },
    "/thyra/registry/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "image/png",
          "text/css",
          "text/html",
          "text/javascript",
          "text/webp"
        ],
        "operationId": "thyraRegistry",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          }
        }
      }
    },
    "/thyra/websiteCreator/{resource}": {
      "get": {
        "produces": [
          "application/json",
          "image/png",
          "text/css",
          "text/html",
          "text/javascript",
          "text/webp"
        ],
        "operationId": "thyraWebsiteCreator",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/websiteCreator/prepare": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "websiteCreatorPrepare",
        "parameters": [
          {
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "x-nullable": false,
            "description": "URL without dot (.), upper case and special characters",
            "name": "url",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Name of the Wallet in which the website will be deployed.",
            "name": "nickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Website contents in a ZIP file.",
            "name": "zipfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "New website created.",
            "schema": {
              "$ref": "#/definitions/Websites"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/websiteCreator/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "websiteCreatorUpload",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Address where to deploy website. The account must have been prepare to receive a website.",
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Wallet's nickname to be used for receiving the website",
            "name": "nickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Website contents in a ZIP file.",
            "name": "zipfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Website's chunk deployed.",
            "schema": {
              "$ref": "#/definitions/Websites"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/websiteCreator/uploadMissingChunks": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "websiteUploadMissingChunks",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "Address where to deploy website. The account must have been prepare to receive a website.",
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Wallet's nickname to be used for receiving the website",
            "name": "nickname",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "x-nullable": false,
            "description": "Website contents in a ZIP file.",
            "name": "zipfile",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-nullable": false,
            "description": "Website missing chunks",
            "name": "missedChunks",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Website's chunk deployed.",
            "schema": {
              "$ref": "#/definitions/Websites"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error - The server has encountered a situation it does not know how to handle.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddressesAttributesAnon": {
      "description": "address key",
      "type": "object",
      "properties": {
        "balance": {
          "type": "object",
          "properties": {
            "final": {
              "type": "string"
            },
            "pending": {
              "type": "string"
            }
          }
        }
      }
    },
    "AddressesAttributesAnonBalance": {
      "type": "object",
      "properties": {
        "final": {
          "type": "string"
        },
        "pending": {
          "type": "string"
        }
      }
    },
    "CmdExecuteFunctionParamsBodyGaz": {
      "description": "Gaz attibutes. Gaz is a virtual resource consumed by node while running smart contract.",
      "type": "object",
      "properties": {
        "limit": {
          "description": "Maximum number of gaz unit that a node will be able consume.",
          "type": "integer",
          "default": 700000000
        },
        "price": {
          "description": "Price of a gaz unit.",
          "type": "number",
          "default": 0
        }
      }
    },
    "Error": {
      "description": "Error object.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "error code.",
          "type": "string",
          "x-nullable": false
        },
        "message": {
          "description": "error message.",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Events": {
      "description": "Events object (V0)",
      "type": "object",
      "properties": {
        "address": {
          "description": "Event caller.",
          "type": "string"
        },
        "data": {
          "description": "Event data.",
          "type": "string"
        }
      }
    },
    "File": {
      "type": "object",
      "required": [
        "url",
        "checksum"
      ],
      "properties": {
        "checksum": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "NodeItems0": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "memory": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "network": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "storage": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "PluginManagerListOKBodyItems0": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Plugin description.",
          "type": "string",
          "x-nullable": false
        },
        "home": {
          "description": "Plugin home Url.",
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "description": "Plugin identifier.",
          "type": "string",
          "x-nullable": false
        },
        "logo": {
          "description": "Plugin logo Url.",
          "type": "string",
          "x-nullable": false
        },
        "name": {
          "description": "Plugin name.",
          "type": "string",
          "x-nullable": false
        },
        "status": {
          "description": "Plugin status.",
          "enum": [
            "Starting",
            "Up",
            "Down",
            "ShuttingDown",
            "Crashed"
          ],
          "x-nullable": false
        }
      }
    },
    "PluginStoreItem": {
      "description": "Plugin item from store.",
      "type": "object",
      "required": [
        "name",
        "description",
        "version",
        "url",
        "file"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/File"
        },
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Registry": {
      "description": "Registry object (V0).",
      "type": "object",
      "properties": {
        "address": {
          "description": "Website's address.",
          "type": "string"
        },
        "metadata": {
          "description": "byte array as string including created_at and updated_at values",
          "type": "string",
          "format": "byte"
        },
        "name": {
          "description": "Website's name.",
          "type": "string"
        }
      }
    },
    "StackingItems0": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "gains": {
          "type": "number"
        },
        "rolls": {
          "type": "integer"
        },
        "slashing": {
          "type": "integer"
        }
      }
    },
    "WalletItems0": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "number"
        },
        "coin": {
          "type": "string"
        }
      }
    },
    "Websites": {
      "description": "Websites object (V0).",
      "type": "object",
      "properties": {
        "address": {
          "description": "Website's address.",
          "type": "string"
        },
        "brokenChunks": {
          "description": "Array of empty chunks if website contains preventing the website to load.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Website's name.",
          "type": "string"
        }
      }
    }
  }
}`))
}
