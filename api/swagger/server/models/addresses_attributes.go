// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddressesAttributes addresses attributes
//
// swagger:model Addresses_attributes
type AddressesAttributes map[string]AddressesAttributesAnon

// Validate validates this addresses attributes
func (m AddressesAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if swag.IsZero(m[k]) { // not required
			continue
		}
		if val, ok := m[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(k)
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this addresses attributes based on the context it is used
func (m AddressesAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if val, ok := m[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// AddressesAttributesAnon address key
//
// swagger:model AddressesAttributesAnon
type AddressesAttributesAnon struct {

	// balance
	Balance *AddressesAttributesAnonBalance `json:"balance,omitempty"`
}

// Validate validates this addresses attributes anon
func (m *AddressesAttributesAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressesAttributesAnon) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this addresses attributes anon based on the context it is used
func (m *AddressesAttributesAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressesAttributesAnon) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {
		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressesAttributesAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressesAttributesAnon) UnmarshalBinary(b []byte) error {
	var res AddressesAttributesAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AddressesAttributesAnonBalance addresses attributes anon balance
//
// swagger:model AddressesAttributesAnonBalance
type AddressesAttributesAnonBalance struct {

	// final
	Final string `json:"final,omitempty"`

	// pending
	Pending string `json:"pending,omitempty"`
}

// Validate validates this addresses attributes anon balance
func (m *AddressesAttributesAnonBalance) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this addresses attributes anon balance based on context it is used
func (m *AddressesAttributesAnonBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddressesAttributesAnonBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressesAttributesAnonBalance) UnmarshalBinary(b []byte) error {
	var res AddressesAttributesAnonBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
