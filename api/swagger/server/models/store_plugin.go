// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorePlugin Plugin item from store.
//
// swagger:model StorePlugin
type StorePlugin struct {

	// assets
	// Required: true
	Assets *StorePluginAssets `json:"assets"`

	// description
	// Required: true
	Description *string `json:"description"`

	// name
	// Required: true
	Name *string `json:"name"`

	// url
	// Required: true
	URL *string `json:"url"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this store plugin
func (m *StorePlugin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorePlugin) validateAssets(formats strfmt.Registry) error {

	if err := validate.Required("assets", "body", m.Assets); err != nil {
		return err
	}

	if m.Assets != nil {
		if err := m.Assets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets")
			}
			return err
		}
	}

	return nil
}

func (m *StorePlugin) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *StorePlugin) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StorePlugin) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *StorePlugin) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this store plugin based on the context it is used
func (m *StorePlugin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorePlugin) contextValidateAssets(ctx context.Context, formats strfmt.Registry) error {

	if m.Assets != nil {
		if err := m.Assets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorePlugin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorePlugin) UnmarshalBinary(b []byte) error {
	var res StorePlugin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorePluginAssets store plugin assets
//
// swagger:model StorePluginAssets
type StorePluginAssets struct {

	// linux
	Linux *File `json:"linux,omitempty"`

	// macos amd64
	MacosAmd64 *File `json:"macos-amd64,omitempty"`

	// macos arm64
	MacosArm64 *File `json:"macos-arm64,omitempty"`

	// windows
	Windows *File `json:"windows,omitempty"`
}

// Validate validates this store plugin assets
func (m *StorePluginAssets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinux(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacosAmd64(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacosArm64(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorePluginAssets) validateLinux(formats strfmt.Registry) error {
	if swag.IsZero(m.Linux) { // not required
		return nil
	}

	if m.Linux != nil {
		if err := m.Linux.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "linux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "linux")
			}
			return err
		}
	}

	return nil
}

func (m *StorePluginAssets) validateMacosAmd64(formats strfmt.Registry) error {
	if swag.IsZero(m.MacosAmd64) { // not required
		return nil
	}

	if m.MacosAmd64 != nil {
		if err := m.MacosAmd64.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "macos-amd64")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "macos-amd64")
			}
			return err
		}
	}

	return nil
}

func (m *StorePluginAssets) validateMacosArm64(formats strfmt.Registry) error {
	if swag.IsZero(m.MacosArm64) { // not required
		return nil
	}

	if m.MacosArm64 != nil {
		if err := m.MacosArm64.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "macos-arm64")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "macos-arm64")
			}
			return err
		}
	}

	return nil
}

func (m *StorePluginAssets) validateWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.Windows) { // not required
		return nil
	}

	if m.Windows != nil {
		if err := m.Windows.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "windows")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "windows")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this store plugin assets based on the context it is used
func (m *StorePluginAssets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinux(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMacosAmd64(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMacosArm64(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorePluginAssets) contextValidateLinux(ctx context.Context, formats strfmt.Registry) error {

	if m.Linux != nil {
		if err := m.Linux.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "linux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "linux")
			}
			return err
		}
	}

	return nil
}

func (m *StorePluginAssets) contextValidateMacosAmd64(ctx context.Context, formats strfmt.Registry) error {

	if m.MacosAmd64 != nil {
		if err := m.MacosAmd64.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "macos-amd64")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "macos-amd64")
			}
			return err
		}
	}

	return nil
}

func (m *StorePluginAssets) contextValidateMacosArm64(ctx context.Context, formats strfmt.Registry) error {

	if m.MacosArm64 != nil {
		if err := m.MacosArm64.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "macos-arm64")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "macos-arm64")
			}
			return err
		}
	}

	return nil
}

func (m *StorePluginAssets) contextValidateWindows(ctx context.Context, formats strfmt.Registry) error {

	if m.Windows != nil {
		if err := m.Windows.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets" + "." + "windows")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets" + "." + "windows")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorePluginAssets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorePluginAssets) UnmarshalBinary(b []byte) error {
	var res StorePluginAssets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
