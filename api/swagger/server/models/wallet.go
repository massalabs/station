// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wallet Wallet object (V0).
//
// swagger:model Wallet
type Wallet struct {

	// wallet's address.
	// Required: true
	Address *string `json:"address"`

	// wallet's balance.
	Balance float64 `json:"balance,omitempty"`

	// wallet's key pairs.
	// Required: true
	KeyPairs []*WalletKeyPairsItems0 `json:"keyPairs"`

	// wallet's nickname.
	// Required: true
	Nickname *string `json:"nickname"`
}

// Validate validates this wallet
func (m *Wallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyPairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateKeyPairs(formats strfmt.Registry) error {

	if err := validate.Required("keyPairs", "body", m.KeyPairs); err != nil {
		return err
	}

	for i := 0; i < len(m.KeyPairs); i++ {
		if swag.IsZero(m.KeyPairs[i]) { // not required
			continue
		}

		if m.KeyPairs[i] != nil {
			if err := m.KeyPairs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keyPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keyPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Wallet) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", m.Nickname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this wallet based on the context it is used
func (m *Wallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeyPairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) contextValidateKeyPairs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeyPairs); i++ {

		if m.KeyPairs[i] != nil {
			if err := m.KeyPairs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keyPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keyPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wallet) UnmarshalBinary(b []byte) error {
	var res Wallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WalletKeyPairsItems0 wallet key pairs items0
//
// swagger:model WalletKeyPairsItems0
type WalletKeyPairsItems0 struct {

	// Nonce used by the AES-GCM algorithm used to protect the key pair's private key.
	// Required: true
	Nonce *string `json:"nonce"`

	// Key pair's private key.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Key pair's public key.
	// Required: true
	PublicKey *string `json:"publicKey"`

	// Salt used by the PBKDF that generates the secret key used to protect the key pair's private key.
	// Required: true
	Salt *string `json:"salt"`
}

// Validate validates this wallet key pairs items0
func (m *WalletKeyPairsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WalletKeyPairsItems0) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *WalletKeyPairsItems0) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *WalletKeyPairsItems0) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *WalletKeyPairsItems0) validateSalt(formats strfmt.Registry) error {

	if err := validate.Required("salt", "body", m.Salt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wallet key pairs items0 based on context it is used
func (m *WalletKeyPairsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WalletKeyPairsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WalletKeyPairsItems0) UnmarshalBinary(b []byte) error {
	var res WalletKeyPairsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
